#include "ASM_x64.h"

#include "ASM.hpp"

// @TODO should be generated by a parser of insns.dat and regs.dat

namespace f::ASM
{
	size_t g_instruction_desc_table_indices[(size_t)Instruction::COUNT + 1] = {
		0,	// UNKNOWN
		0,	// ADD - UNKNOWN has 0 desc
		2,	// CALL
		3,	// HLT
		4,	// MOV
		8,	// PUSH
		10,	// SUB
		12
	};

	Instruction_Desc g_instruction_desc_table[] = {
		// UNKNOWN

		// ADD
		{0x83, {Operand::Type::REGISTER, Operand::Size::QUAD_WORD}, {Operand::Type::IMMEDIATE, Operand::Size::BYTE}}, // ADD     rm64,imm8           [mi:    hle o64 83 /0 ib,s]         X64,LOCK
		{0x16, {Operand::Type::ADDRESS, Operand::Size::WORD}},

		// CALL
		{0xFF, {Operand::Type::ADDRESS, Operand::Size::QUAD_WORD}, {Operand::Type::NONE, Operand::Size::NONE}},	// CALL        mem64|far           [m: o64 ff /3]              X64

		// HLT
		{0xF4},	// HLT     void                [   f4]                 8086,PRIV

		// MOV
		{0xB8, {Operand::Type::REGISTER, Operand::Size::DOUBLE_WORD}, {Operand::Type::IMMEDIATE, Operand::Size::BYTE}}, // ??? seems to be a double immediate at least: MOV     reg32,imm           [ri:    o32 b8+r id]                386,SM
		{0xB8, {Operand::Type::REGISTER, Operand::Size::QUAD_WORD}, {Operand::Type::IMMEDIATE, Operand::Size::BYTE}}, // ??? seems to be a double immediate at least: MOV     reg32,imm           [ri:    o32 b8+r id]                386,SM
		{0x8B, {Operand::Type::REGISTER, Operand::Size::QUAD_WORD}, {Operand::Type::REGISTER, Operand::Size::QUAD_WORD}}, // MOV     reg64,reg64[rm:o64 8b / r]              X64
		{0x8B, {Operand::Type::REGISTER, Operand::Size::QUAD_WORD}, {Operand::Type::ADDRESS, Operand::Size::QUAD_WORD}}, // MOV     reg64,mem           [rm:    o64 8b /r]              X64,SM

		// PUSH
		{0x6A, {Operand::Type::IMMEDIATE, Operand::Size::BYTE}}, // PUSH        imm8                [i: 6a ib,s]                    186
		{0x16, {Operand::Type::ADDRESS, Operand::Size::WORD}},

		// SUB
		{0x83, {Operand::Type::REGISTER, Operand::Size::QUAD_WORD}, {Operand::Type::IMMEDIATE, Operand::Size::BYTE}}, // SUB     rm64,imm8           [mi:    hle o64 83 /5 ib,s]         X64,LOCK
		{0x16, {Operand::Type::ADDRESS, Operand::Size::WORD}},
	};

	Operand::Size	g_register_sizes[(size_t)Register::COUNT] = {
		Operand::Size::NONE,	// UNKNOWN,

		// General - purpose registers
		Operand::Size::BYTE,	// AL,
		Operand::Size::BYTE,	// AH,
		Operand::Size::WORD,	// AX,
		Operand::Size::DOUBLE_WORD,	// EAX,
		Operand::Size::QUAD_WORD,	// RAX,
		Operand::Size::BYTE,	// BL,
		Operand::Size::BYTE,	// BH,
		Operand::Size::WORD,	// BX,
		Operand::Size::DOUBLE_WORD,	// EBX,
		Operand::Size::QUAD_WORD,	// RBX,
		Operand::Size::BYTE,	// CL,
		Operand::Size::BYTE,	// CH,
		Operand::Size::WORD,	// CX,
		Operand::Size::DOUBLE_WORD,	// ECX,
		Operand::Size::QUAD_WORD,	// RCX,
		Operand::Size::BYTE,	// DL,
		Operand::Size::BYTE,	// DH,
		Operand::Size::WORD,	// DX,
		Operand::Size::DOUBLE_WORD,	// EDX,
		Operand::Size::QUAD_WORD,	// RDX,
		Operand::Size::BYTE,	// SPL,
		Operand::Size::WORD,	// SP,
		Operand::Size::DOUBLE_WORD,	// ESP,
		Operand::Size::QUAD_WORD, // RSP,
		Operand::Size::BYTE,	// BPL,
		Operand::Size::WORD,	// BP,
		Operand::Size::DOUBLE_WORD,	// EBP,
		Operand::Size::QUAD_WORD, // RBP,
		Operand::Size::BYTE,	// SIL,
		Operand::Size::WORD,	// SI,
		Operand::Size::DOUBLE_WORD,	// ESI,
		Operand::Size::QUAD_WORD, // RSI,
		Operand::Size::BYTE,	// DIL,
		Operand::Size::WORD,	// DI,
		Operand::Size::DOUBLE_WORD,	// EDI,
		Operand::Size::QUAD_WORD, // RDI,
		Operand::Size::QUAD_WORD,	// ROperand::Size::Byte,
		Operand::Size::DOUBLE_WORD,	// R8D,
		Operand::Size::WORD,	// R8W,
		Operand::Size::BYTE,	// R8B,
		Operand::Size::QUAD_WORD,	// R9,
		Operand::Size::DOUBLE_WORD,	// R9D,
		Operand::Size::WORD,	// R9W,
		Operand::Size::BYTE,	// R9B,
		Operand::Size::QUAD_WORD,	// R10,
		Operand::Size::DOUBLE_WORD,	// R10D,
		Operand::Size::WORD,	// R10W,
		Operand::Size::BYTE,	// R10B,
		Operand::Size::QUAD_WORD,	// R11,
		Operand::Size::DOUBLE_WORD,	// R11D,
		Operand::Size::WORD,	// R11W,
		Operand::Size::BYTE,	// R11B,
		Operand::Size::QUAD_WORD,	// R12,
		Operand::Size::DOUBLE_WORD,	// R12D,
		Operand::Size::WORD,	// R12W,
		Operand::Size::BYTE,	// R12B,
		Operand::Size::QUAD_WORD,	// R13,
		Operand::Size::DOUBLE_WORD,	// R13D,
		Operand::Size::WORD,	// R13W,
		Operand::Size::BYTE,	// R13B,
		Operand::Size::QUAD_WORD,	// R14,
		Operand::Size::DOUBLE_WORD,	// R14D,
		Operand::Size::WORD,	// R14W,
		Operand::Size::BYTE,	// R14B,
		Operand::Size::QUAD_WORD,	// R15,
		Operand::Size::DOUBLE_WORD,	// R15D,
		Operand::Size::WORD,	// R15W,
		Operand::Size::BYTE,	// R15B,

		// Segment registers
		Operand::Size::QUAD_WORD,	// ES,
		Operand::Size::QUAD_WORD,	// CS,
		Operand::Size::QUAD_WORD,	// SS,
		Operand::Size::QUAD_WORD,	// DS,
		Operand::Size::QUAD_WORD,	// FS,
		Operand::Size::QUAD_WORD,	// GS,
		Operand::Size::QUAD_WORD,	// SEGR6,
		Operand::Size::QUAD_WORD,	// SEGR7,

		// Control registers
		Operand::Size::QUAD_WORD,	// CR0,
		Operand::Size::QUAD_WORD,	// CR1,
		Operand::Size::QUAD_WORD,	// CR2,
		Operand::Size::QUAD_WORD,	// CR3,
		Operand::Size::QUAD_WORD,	// CR4,
		Operand::Size::QUAD_WORD,	// CR5,
		Operand::Size::QUAD_WORD,	// CR6,
		Operand::Size::QUAD_WORD,	// CR7,
		Operand::Size::QUAD_WORD,	// CROperand::Size::Byte,
		Operand::Size::QUAD_WORD,	// CR9,
		Operand::Size::QUAD_WORD,	// CR10,
		Operand::Size::QUAD_WORD,	// CR11,
		Operand::Size::QUAD_WORD,	// CR12,
		Operand::Size::QUAD_WORD,	// CR13,
		Operand::Size::QUAD_WORD,	// CR14,
		Operand::Size::QUAD_WORD	// CR15,
	};
}
