#pragma once

#include <fstd/language/types.hpp>

// @TODO should be generated by a parser of insns.dat and regs.dat

namespace f::ASM
{
    enum class Instruction : uint16_t
    {
        UNKNOWN,

        ADD,
        CALL,
        HLT,
        MOV,
        PUSH,
        SUB,

		COUNT,
    };

    enum class Register : uint8_t // @TODO Can we have more than 256 registers
    {
        UNKNOWN,

		// General - purpose registers
		AL,
		AH,
		AX,
		EAX,
		RAX,
		BL,
		BH,
		BX,
		EBX,
		RBX,
		CL,
		CH,
		CX,
		ECX,
		RCX,
		DL,
		DH,
		DX,
		EDX,
		RDX,
		SPL,
		SP,
		ESP,
		RSP,
		BPL,
		BP,
		EBP,
		RBP,
		SIL,
		SI,
		ESI,
		RSI,
		DIL,
		DI,
		EDI,
		RDI,
		R8,
		R8D,
		R8W,
		R8B,
		R9,
		R9D,
		R9W,
		R9B,
		R10,
		R10D,
		R10W,
		R10B,
		R11,
		R11D,
		R11W,
		R11B,
		R12,
		R12D,
		R12W,
		R12B,
		R13,
		R13D,
		R13W,
		R13B,
		R14,
		R14D,
		R14W,
		R14B,
		R15,
		R15D,
		R15W,
		R15B,

		// Segment registers
		ES,
		CS,
		SS,
		DS,
		FS,
		GS,
		SEGR6,
		SEGR7,

		// Control registers
		CR0,
		CR1,
		CR2,
		CR3,
		CR4,
		CR5,
		CR6,
		CR7,
		CR8,
		CR9,
		CR10,
		CR11,
		CR12,
		CR13,
		CR14,
		CR15,

		// @TODO

		//// Debug registers
		//dr0-15	REG_DREG	dreg		0
		//
		//// Test registers
		//tr0-7	REG_TREG	treg		0
		//
		//// Floating-point registers
		//st0	FPU0		fpureg		0
		//st1-7	FPUREG		fpureg		1
		//
		//// MMX registers
		//mm0-7	MMXREG		mmxreg		0
		//
		//// SSE registers
		//xmm0	XMM0		xmmreg		0
		//xmm1-15	XMM_L16		xmmreg		1
		//xmm16-31	XMMREG		xmmreg		16
		//
		//// AVX registers
		//ymm0	YMM0		ymmreg		0
		//ymm1-15	YMM_L16		ymmreg		1
		//ymm16-31	YMMREG		ymmreg		16
		//
		//// AVX512 registers
		//zmm0	ZMM0		zmmreg		0
		//zmm1-15	ZMM_L16		zmmreg		1
		//zmm16-31	ZMMREG		zmmreg		16
		//
		//// Opmask registers
		//k0	OPMASK0		opmaskreg	0
		//k1-7	OPMASKREG	opmaskreg	1   TFLAG_BRC_OPT
		//
		//// Bounds registers
		//bnd0-3	BNDREG		bndreg		0

		COUNT,
	};
}
