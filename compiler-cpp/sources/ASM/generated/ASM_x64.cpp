// This file is generated by f-asm_nasm_db_to_code program

#include "ASM_x64.hpp"

#include "../ASM.hpp"

namespace f::ASM
{
    size_t g_instruction_desc_table_indices[(size_t)Instruction::COUNT + 1] = {
        0,	// UNKNOWN
        0,	// AAA
        1,	// AAD
        3,	// AAM
        5,	// AAS
        6,	// ADC
        45,	// ADD
        84,	// AND
        123,	// ARPL
        125,	// BOUND
        127,	// BSF
        133,	// BSR
        139,	// BT
        148,	// BTC
        157,	// BTR
        166,	// BTS
        175,	// CALL
        204,	// CBW
        205,	// CDQ
        206,	// CDQE
        207,	// CLC
        208,	// CLD
        209,	// CLI
        210,	// CLTS
        211,	// CMC
        212,	// CMP
        251,	// CMPSB
        252,	// CMPSD
        253,	// CMPSQ
        254,	// CMPSW
        257,	// CMPXCHG486
        263,	// CMPXCHG16B
        264,	// CQO
        265,	// CWD
        266,	// CWDE
        267,	// DAA
        268,	// DAS
        269,	// DEC
        273,	// DIV
        277,	// ENTER
        278,	// F2XM1
        279,	// FABS
        280,	// FADD
        283,	// FADDP
        284,	// FBLD
        286,	// FBSTP
        288,	// FCHS
        289,	// FCLEX
        290,	// FCOM
        293,	// FCOMP
        296,	// FCOMPP
        297,	// FCOS
        298,	// FDECSTP
        299,	// FDISI
        300,	// FDIV
        303,	// FDIVP
        304,	// FDIVR
        307,	// FDIVRP
        308,	// FENI
        309,	// FFREE
        310,	// FFREEP
        311,	// FIADD
        313,	// FICOM
        315,	// FICOMP
        317,	// FIDIV
        319,	// FIDIVR
        321,	// FILD
        324,	// FIMUL
        326,	// FINCSTP
        327,	// FINIT
        328,	// FIST
        330,	// FISTP
        333,	// FISUB
        335,	// FISUBR
        337,	// FLD
        341,	// FLD1
        342,	// FLDCW
        343,	// FLDENV
        344,	// FLDL2E
        345,	// FLDL2T
        346,	// FLDLG2
        347,	// FLDLN2
        348,	// FLDPI
        349,	// FLDZ
        350,	// FMUL
        353,	// FMULP
        354,	// FNCLEX
        355,	// FNDISI
        356,	// FNENI
        357,	// FNINIT
        358,	// FNOP
        359,	// FNSAVE
        360,	// FNSTCW
        361,	// FNSTENV
        362,	// FNSTSW
        364,	// FPATAN
        365,	// FPREM
        366,	// FPREM1
        367,	// FPTAN
        368,	// FRNDINT
        369,	// FRSTOR
        370,	// FSAVE
        371,	// FSCALE
        372,	// FSETPM
        373,	// FSIN
        374,	// FSINCOS
        375,	// FSQRT
        376,	// FST
        379,	// FSTCW
        380,	// FSTENV
        381,	// FSTP
        385,	// FSTSW
        387,	// FSUB
        390,	// FSUBP
        391,	// FSUBR
        394,	// FSUBRP
        395,	// FTST
        396,	// FUCOM
        397,	// FUCOMP
        398,	// FUCOMPP
        399,	// FXAM
        400,	// FXCH
        401,	// FXTRACT
        402,	// FYL2X
        403,	// FYL2XP1
        404,	// HLT
        405,	// IBTS
        409,	// ICEBP
        410,	// IDIV
        414,	// IMUL
        448,	// IN
        454,	// INC
        458,	// INSB
        459,	// INSD
        460,	// INSW
        461,	// INT
        462,	// INT01
        463,	// INT1
        464,	// INT03
        465,	// INT3
        466,	// INTO
        467,	// INVD
        468,	// INVLPG
        470,	// IRET
        471,	// IRETD
        472,	// IRETQ
        473,	// IRETW
        474,	// JCXZ
        475,	// JECXZ
        476,	// JRCXZ
        477,	// JMP
        508,	// LAHF
        509,	// LAR
        521,	// LDS
        523,	// LEA
        529,	// LEAVE
        530,	// LES
        532,	// LFENCE
        533,	// LFS
        536,	// LGDT
        537,	// LGS
        540,	// LIDT
        541,	// LLDT
        544,	// LMSW
        547,	// LOADALL
        548,	// LOADALL286
        549,	// LODSB
        550,	// LODSD
        551,	// LODSQ
        552,	// LODSW
        553,	// LOOP
        557,	// LOOPE
        561,	// LOOPNE
        565,	// LOOPNZ
        569,	// LOOPZ
        573,	// LSL
        585,	// LSS
        588,	// LTR
        591,	// MFENCE
        594,	// MOV
        651,	// MOVSB
        652,	// MOVSD
        653,	// MOVSQ
        654,	// MOVSW
        655,	// MOVSX
        661,	// MOVSXD
        662,	// MOVSX
        663,	// MOVZX
        669,	// MUL
        673,	// NEG
        677,	// NOP
        679,	// NOT
        683,	// OR
        722,	// OUT
        728,	// OUTSB
        729,	// OUTSD
        730,	// OUTSW
        731,	// PAUSE
        732,	// POP
        741,	// POPA
        742,	// POPAD
        743,	// POPAW
        744,	// POPF
        745,	// POPFD
        746,	// POPFQ
        747,	// POPFW
        748,	// PUSH
        768,	// PUSHA
        769,	// PUSHAD
        770,	// PUSHAW
        771,	// PUSHF
        772,	// PUSHFD
        773,	// PUSHFQ
        774,	// PUSHFW
        775,	// RCL
        787,	// RCR
        799,	// RET
        801,	// RETF
        803,	// RETN
        805,	// RETW
        807,	// RETFW
        809,	// RETNW
        811,	// RETD
        813,	// RETFD
        815,	// RETND
        817,	// RETQ
        819,	// RETFQ
        821,	// RETNQ
        823,	// ROL
        835,	// ROR
        847,	// RSDC
        848,	// RSLDT
        849,	// RSTS
        850,	// SAHF
        851,	// SAL
        863,	// SALC
        864,	// SAR
        876,	// SBB
        915,	// SCASB
        916,	// SCASD
        917,	// SCASQ
        918,	// SCASW
        919,	// SFENCE
        920,	// SGDT
        921,	// SHL
        933,	// SHLD
        945,	// SHR
        957,	// SHRD
        969,	// SIDT
        970,	// SLDT
        976,	// SKINIT
        977,	// SMI
        978,	// SMINTOLD
        979,	// SMSW
        984,	// STC
        985,	// STD
        986,	// STI
        987,	// STOSB
        988,	// STOSD
        989,	// STOSQ
        990,	// STOSW
        991,	// STR
        996,	// SUB
        1035,	// SVDC
        1036,	// SVLDT
        1037,	// SVTS
        1038,	// SWAPGS
        1039,	// TEST
        1062,	// UD0
        1066,	// UD1
        1070,	// UD2B
        1074,	// UD2
        1075,	// UD2A
        1076,	// UMOV
        1088,	// VERR
        1091,	// VERW
        1094,	// FWAIT
        1095,	// WBINVD
        1096,	// XADD
        1104,	// XBTS
        1108,	// XCHG
        1125,	// XLATB
        1126,	// XLAT
        1127,	// XOR
        1171,	// FXRSTOR64
        1172,	// FXSAVE64
        1189,	// PEXTRQ
        1191,	// PINSRQ
        1196,	// RDPKRU
        1197,	// WRPKRU
        1205,	// INCSSPQ
        1206,	// RDSSPQ
        1207,	// WRUSSQ
        1208,	// WRSSQ
    };


    Instruction_Desc g_instruction_desc_table[] = {
        // UNKNOWN

        // AAA
        {0x37, , },

        // AAD
        {0xd50a, , },
        {0xd5, , },

        // AAM
        {0xd40a, , },
        {0xd4, , },

        // AAS
        {0x3f, , },

        // ADC
        {0x10, , },
        {0x10, , },
        {0x11, , },
        {0x11, , },
        {0x11, , },
        {0x11, , },
        {0x11, , },
        {0x11, , },
        {0x12, , },
        {0x12, , },
        {0x13, , },
        {0x13, , },
        {0x13, , },
        {0x13, , },
        {0x13, , },
        {0x13, , },
        {0x83, , },
        {0x83, , },
        {0x83, , },
        {0x14, , },
        {0x83, , },
        {0x15, , },
        {0x83, , },
        {0x15, , },
        {0x83, , },
        {0x15, , },
        {0x80, , },
        {0x83, , },
        {0x81, , },
        {0x83, , },
        {0x81, , },
        {0x83, , },
        {0x81, , },
        {0x80, , },
        {0x83, , },
        {0x81, , },
        {0x83, , },
        {0x81, , },
        {0x82, , },

        // ADD
        {0x00, , },
        {0x00, , },
        {0x01, , },
        {0x01, , },
        {0x01, , },
        {0x01, , },
        {0x01, , },
        {0x01, , },
        {0x02, , },
        {0x02, , },
        {0x03, , },
        {0x03, , },
        {0x03, , },
        {0x03, , },
        {0x03, , },
        {0x03, , },
        {0x83, , },
        {0x83, , },
        {0x83, , },
        {0x04, , },
        {0x83, , },
        {0x05, , },
        {0x83, , },
        {0x05, , },
        {0x83, , },
        {0x05, , },
        {0x80, , },
        {0x83, , },
        {0x81, , },
        {0x83, , },
        {0x81, , },
        {0x83, , },
        {0x81, , },
        {0x80, , },
        {0x83, , },
        {0x81, , },
        {0x83, , },
        {0x81, , },
        {0x82, , },

        // AND
        {0x20, , },
        {0x20, , },
        {0x21, , },
        {0x21, , },
        {0x21, , },
        {0x21, , },
        {0x21, , },
        {0x21, , },
        {0x22, , },
        {0x22, , },
        {0x23, , },
        {0x23, , },
        {0x23, , },
        {0x23, , },
        {0x23, , },
        {0x23, , },
        {0x83, , },
        {0x83, , },
        {0x83, , },
        {0x24, , },
        {0x83, , },
        {0x25, , },
        {0x83, , },
        {0x25, , },
        {0x83, , },
        {0x25, , },
        {0x80, , },
        {0x83, , },
        {0x81, , },
        {0x83, , },
        {0x81, , },
        {0x83, , },
        {0x81, , },
        {0x80, , },
        {0x83, , },
        {0x81, , },
        {0x83, , },
        {0x81, , },
        {0x82, , },

        // ARPL
        {0x63, , },
        {0x63, , },

        // BOUND
        {0x62, , },
        {0x62, , },

        // BSF
        {0x0fbc, , },
        {0x0fbc, , },
        {0x0fbc, , },
        {0x0fbc, , },
        {0x0fbc, , },
        {0x0fbc, , },

        // BSR
        {0x0fbd, , },
        {0x0fbd, , },
        {0x0fbd, , },
        {0x0fbd, , },
        {0x0fbd, , },
        {0x0fbd, , },

        // BT
        {0x0fa3, , },
        {0x0fa3, , },
        {0x0fa3, , },
        {0x0fa3, , },
        {0x0fa3, , },
        {0x0fa3, , },
        {0x0fba, , },
        {0x0fba, , },
        {0x0fba, , },

        // BTC
        {0x0fbb, , },
        {0x0fbb, , },
        {0x0fbb, , },
        {0x0fbb, , },
        {0x0fbb, , },
        {0x0fbb, , },
        {0x0fba, , },
        {0x0fba, , },
        {0x0fba, , },

        // BTR
        {0x0fb3, , },
        {0x0fb3, , },
        {0x0fb3, , },
        {0x0fb3, , },
        {0x0fb3, , },
        {0x0fb3, , },
        {0x0fba, , },
        {0x0fba, , },
        {0x0fba, , },

        // BTS
        {0x0fab, , },
        {0x0fab, , },
        {0x0fab, , },
        {0x0fab, , },
        {0x0fab, , },
        {0x0fab, , },
        {0x0fba, , },
        {0x0fba, , },
        {0x0fba, , },

        // CALL
        {0xe8, , },
        {0xe8, , },
        {0x9a, , },
        // Call/jmp near imm/reg/mem is always 64-bit in long mode.
        {0xe8, , },
        {0xe8, , },
        {0x9a, , },
        {0xe8, , },
        {0xe8, , },
        {0x9a, , },
        {0xe8, , },
        {0xe8, , },
        {0x9a, , },
        {0x9a, , },
        {0x9a, , },
        {0x9a, , },
        {0x9a, , },
        {0xff, , },
        {0xff, , },
        {0xff, , },
        {0xff, , },
        {0xff, , },
        {0xff, , },
        {0xff, , },
        {0xff, , },
        {0xff, , },
        {0xff, , },
        {0xff, , },
        {0xff, , },
        {0xff, , },

        // CBW
        {0x98, , },

        // CDQ
        {0x99, , },

        // CDQE
        {0x98, , },

        // CLC
        {0xf8, , },

        // CLD
        {0xfc, , },

        // CLI
        {0xfa, , },

        // CLTS
        {0x0f06, , },

        // CMC
        {0xf5, , },

        // CMP
        {0x38, , },
        {0x38, , },
        {0x39, , },
        {0x39, , },
        {0x39, , },
        {0x39, , },
        {0x39, , },
        {0x39, , },
        {0x3a, , },
        {0x3a, , },
        {0x3b, , },
        {0x3b, , },
        {0x3b, , },
        {0x3b, , },
        {0x3b, , },
        {0x3b, , },
        {0x83, , },
        {0x83, , },
        {0x83, , },
        {0x3c, , },
        {0x83, , },
        {0x3d, , },
        {0x83, , },
        {0x3d, , },
        {0x83, , },
        {0x3d, , },
        {0x80, , },
        {0x83, , },
        {0x81, , },
        {0x83, , },
        {0x81, , },
        {0x83, , },
        {0x81, , },
        {0x80, , },
        {0x83, , },
        {0x81, , },
        {0x83, , },
        {0x81, , },
        {0x82, , },

        // CMPSB
        {0xa6, , },

        // CMPSD
        {0xa7, , },

        // CMPSQ
        {0xa7, , },

        // CMPSW
        {0xa7, , },
        {0x0fb1, , },
        {0x0fb1, , },

        // CMPXCHG486
        {0x0fa6, , },
        {0x0fa6, , },
        {0x0fa7, , },
        {0x0fa7, , },
        {0x0fa7, , },
        {0x0fa7, , },

        // CMPXCHG16B
        {0x0fc7, , },

        // CQO
        {0x99, , },

        // CWD
        {0x99, , },

        // CWDE
        {0x98, , },

        // DAA
        {0x27, , },

        // DAS
        {0x2f, , },

        // DEC
        {0xfe, , },
        {0xff, , },
        {0xff, , },
        {0xff, , },

        // DIV
        {0xf6, , },
        {0xf7, , },
        {0xf7, , },
        {0xf7, , },

        // ENTER
        {0xc8, , },

        // F2XM1
        {0xd9f0, , },

        // FABS
        {0xd9e1, , },

        // FADD
        {0xd8, , },
        {0xdc, , },
        {0xdec1, , },

        // FADDP
        {0xdec1, , },

        // FBLD
        {0xdf, , },
        {0xdf, , },

        // FBSTP
        {0xdf, , },
        {0xdf, , },

        // FCHS
        {0xd9e0, , },

        // FCLEX
        {0xdbe2, , },

        // FCOM
        {0xd8, , },
        {0xdc, , },
        {0xd8d1, , },

        // FCOMP
        {0xd8, , },
        {0xdc, , },
        {0xd8d9, , },

        // FCOMPP
        {0xded9, , },

        // FCOS
        {0xd9ff, , },

        // FDECSTP
        {0xd9f6, , },

        // FDISI
        {0xdbe1, , },

        // FDIV
        {0xd8, , },
        {0xdc, , },
        {0xdef9, , },

        // FDIVP
        {0xdef9, , },

        // FDIVR
        {0xd8, , },
        {0xdc, , },
        {0xdef1, , },

        // FDIVRP
        {0xdef1, , },

        // FENI
        {0xdbe0, , },

        // FFREE
        {0xddc1, , },

        // FFREEP
        {0xdfc1, , },

        // FIADD
        {0xda, , },
        {0xde, , },

        // FICOM
        {0xda, , },
        {0xde, , },

        // FICOMP
        {0xda, , },
        {0xde, , },

        // FIDIV
        {0xda, , },
        {0xde, , },

        // FIDIVR
        {0xda, , },
        {0xde, , },

        // FILD
        {0xdb, , },
        {0xdf, , },
        {0xdf, , },

        // FIMUL
        {0xda, , },
        {0xde, , },

        // FINCSTP
        {0xd9f7, , },

        // FINIT
        {0xdbe3, , },

        // FIST
        {0xdb, , },
        {0xdf, , },

        // FISTP
        {0xdb, , },
        {0xdf, , },
        {0xdf, , },

        // FISUB
        {0xda, , },
        {0xde, , },

        // FISUBR
        {0xda, , },
        {0xde, , },

        // FLD
        {0xd9, , },
        {0xdd, , },
        {0xdb, , },
        {0xd9c1, , },

        // FLD1
        {0xd9e8, , },

        // FLDCW
        {0xd9, , },

        // FLDENV
        {0xd9, , },

        // FLDL2E
        {0xd9ea, , },

        // FLDL2T
        {0xd9e9, , },

        // FLDLG2
        {0xd9ec, , },

        // FLDLN2
        {0xd9ed, , },

        // FLDPI
        {0xd9eb, , },

        // FLDZ
        {0xd9ee, , },

        // FMUL
        {0xd8, , },
        {0xdc, , },
        {0xdec9, , },

        // FMULP
        {0xdec9, , },

        // FNCLEX
        {0xdbe2, , },

        // FNDISI
        {0xdbe1, , },

        // FNENI
        {0xdbe0, , },

        // FNINIT
        {0xdbe3, , },

        // FNOP
        {0xd9d0, , },

        // FNSAVE
        {0xdd, , },

        // FNSTCW
        {0xd9, , },

        // FNSTENV
        {0xd9, , },

        // FNSTSW
        {0xdd, , },
        {0xdfe0, , },

        // FPATAN
        {0xd9f3, , },

        // FPREM
        {0xd9f8, , },

        // FPREM1
        {0xd9f5, , },

        // FPTAN
        {0xd9f2, , },

        // FRNDINT
        {0xd9fc, , },

        // FRSTOR
        {0xdd, , },

        // FSAVE
        {0xdd, , },

        // FSCALE
        {0xd9fd, , },

        // FSETPM
        {0xdbe4, , },

        // FSIN
        {0xd9fe, , },

        // FSINCOS
        {0xd9fb, , },

        // FSQRT
        {0xd9fa, , },

        // FST
        {0xd9, , },
        {0xdd, , },
        {0xddd1, , },

        // FSTCW
        {0xd9, , },

        // FSTENV
        {0xd9, , },

        // FSTP
        {0xd9, , },
        {0xdd, , },
        {0xdb, , },
        {0xddd9, , },

        // FSTSW
        {0xdd, , },
        {0xdfe0, , },

        // FSUB
        {0xd8, , },
        {0xdc, , },
        {0xdee9, , },

        // FSUBP
        {0xdee9, , },

        // FSUBR
        {0xd8, , },
        {0xdc, , },
        {0xdee1, , },

        // FSUBRP
        {0xdee1, , },

        // FTST
        {0xd9e4, , },

        // FUCOM
        {0xdde1, , },

        // FUCOMP
        {0xdde9, , },

        // FUCOMPP
        {0xdae9, , },

        // FXAM
        {0xd9e5, , },

        // FXCH
        {0xd9c9, , },

        // FXTRACT
        {0xd9f4, , },

        // FYL2X
        {0xd9f1, , },

        // FYL2XP1
        {0xd9f9, , },

        // HLT
        {0xf4, , },

        // IBTS
        {0x0fa7, , },
        {0x0fa7, , },
        {0x0fa7, , },
        {0x0fa7, , },

        // ICEBP
        {0xf1, , },

        // IDIV
        {0xf6, , },
        {0xf7, , },
        {0xf7, , },
        {0xf7, , },

        // IMUL
        {0xf6, , },
        {0xf7, , },
        {0xf7, , },
        {0xf7, , },
        {0x0faf, , },
        {0x0faf, , },
        {0x0faf, , },
        {0x0faf, , },
        {0x0faf, , },
        {0x0faf, , },
        {0x6b, , },
        {0x6b, , },
        {0x69, , },
        {0x69, , },
        {0x6b, , },
        {0x6b, , },
        {0x69, , },
        {0x69, , },
        {0x6b, , },
        {0x6b, , },
        {0x69, , },
        {0x69, , },
        {0x6b, , },
        {0x6b, , },
        {0x69, , },
        {0x69, , },
        {0x6b, , },
        {0x6b, , },
        {0x69, , },
        {0x69, , },
        {0x6b, , },
        {0x6b, , },
        {0x69, , },
        {0x69, , },

        // IN
        {0xe4, , },
        {0xe5, , },
        {0xe5, , },
        {0xec, , },
        {0xed, , },
        {0xed, , },

        // INC
        {0xfe, , },
        {0xff, , },
        {0xff, , },
        {0xff, , },

        // INSB
        {0x6c, , },

        // INSD
        {0x6d, , },

        // INSW
        {0x6d, , },

        // INT
        {0xcd, , },

        // INT01
        {0xf1, , },

        // INT1
        {0xf1, , },

        // INT03
        {0xcc, , },

        // INT3
        {0xcc, , },

        // INTO
        {0xce, , },

        // INVD
        {0x0f08, , },

        // INVLPG
        {0x0f01, , },
        {0x0f01df, , },

        // IRET
        {0xcf, , },

        // IRETD
        {0xcf, , },

        // IRETQ
        {0xcf, , },

        // IRETW
        {0xcf, , },

        // JCXZ
        {0xe3, , },

        // JECXZ
        {0xe3, , },

        // JRCXZ
        {0xe3, , },

        // JMP
        {0xeb, , },
        {0xeb, , },
        {0xe9, , },
        {0xe9, , },
        {0xea, , },
        // Call/jmp near imm/reg/mem is always 64-bit in long mode.
        {0xe9, , },
        {0xe9, , },
        {0xea, , },
        {0xe9, , },
        {0xe9, , },
        {0xea, , },
        {0xe9, , },
        {0xe9, , },
        {0xea, , },
        {0xea, , },
        {0xea, , },
        {0xea, , },
        {0xea, , },
        {0xff, , },
        {0xff, , },
        {0xff, , },
        {0xff, , },
        {0xff, , },
        {0xff, , },
        {0xff, , },
        {0xff, , },
        {0xff, , },
        {0xff, , },
        {0xff, , },
        {0xff, , },
        {0xff, , },

        // LAHF
        {0x9f, , },

        // LAR
        {0x0f02, , },
        {0x0f02, , },
        {0x0f02, , },
        {0x0f02, , },
        {0x0f02, , },
        {0x0f02, , },
        {0x0f02, , },
        {0x0f02, , },
        {0x0f02, , },
        {0x0f02, , },
        {0x0f02, , },
        {0x0f02, , },

        // LDS
        {0xc5, , },
        {0xc5, , },

        // LEA
        {0x8d, , },
        {0x8d, , },
        {0x8d, , },
        {0x8d, , },
        {0x8d, , },
        {0x8d, , },

        // LEAVE
        {0xc9, , },

        // LES
        {0xc4, , },
        {0xc4, , },

        // LFENCE
        {0x0faee8, , },

        // LFS
        {0x0fb4, , },
        {0x0fb4, , },
        {0x0fb4, , },

        // LGDT
        {0x0f01, , },

        // LGS
        {0x0fb5, , },
        {0x0fb5, , },
        {0x0fb5, , },

        // LIDT
        {0x0f01, , },

        // LLDT
        {0x0f00, , },
        {0x0f00, , },
        {0x0f00, , },

        // LMSW
        {0x0f01, , },
        {0x0f01, , },
        {0x0f01, , },

        // LOADALL
        {0x0f07, , },

        // LOADALL286
        {0x0f05, , },

        // LODSB
        {0xac, , },

        // LODSD
        {0xad, , },

        // LODSQ
        {0xad, , },

        // LODSW
        {0xad, , },

        // LOOP
        {0xe2, , },
        {0xe2, , },
        {0xe2, , },
        {0xe2, , },

        // LOOPE
        {0xe1, , },
        {0xe1, , },
        {0xe1, , },
        {0xe1, , },

        // LOOPNE
        {0xe0, , },
        {0xe0, , },
        {0xe0, , },
        {0xe0, , },

        // LOOPNZ
        {0xe0, , },
        {0xe0, , },
        {0xe0, , },
        {0xe0, , },

        // LOOPZ
        {0xe1, , },
        {0xe1, , },
        {0xe1, , },
        {0xe1, , },

        // LSL
        {0x0f03, , },
        {0x0f03, , },
        {0x0f03, , },
        {0x0f03, , },
        {0x0f03, , },
        {0x0f03, , },
        {0x0f03, , },
        {0x0f03, , },
        {0x0f03, , },
        {0x0f03, , },
        {0x0f03, , },
        {0x0f03, , },

        // LSS
        {0x0fb2, , },
        {0x0fb2, , },
        {0x0fb2, , },

        // LTR
        {0x0f00, , },
        {0x0f00, , },
        {0x0f00, , },

        // MFENCE
        {0x0faef0, , },
        {0x0f01c8, , },
        {0x0f01fa, , },

        // MOV
        {0x8c, , },
        {0x8c, , },
        {0x8c, , },
        {0x8c, , },
        {0x8c, , },
        {0x8e, , },
        {0x8e, , },
        {0x8e, , },
        {0x8e, , },
        {0x8e, , },
        {0x8e, , },
        {0x8e, , },
        {0xa0, , },
        {0xa1, , },
        {0xa1, , },
        {0xa1, , },
        {0xa2, , },
        {0xa3, , },
        {0xa3, , },
        {0xa3, , },
        {0x0f20, , },
        {0x0f22, , },
        {0x0f21, , },
        {0x0f21, , },
        {0x0f23, , },
        {0x0f23, , },
        {0x0f24, , },
        {0x0f26, , },
        {0x88, , },
        {0x88, , },
        {0x89, , },
        {0x89, , },
        {0x89, , },
        {0x89, , },
        {0x89, , },
        {0x89, , },
        {0x8a, , },
        {0x8a, , },
        {0x8b, , },
        {0x8b, , },
        {0x8b, , },
        {0x8b, , },
        {0x8b, , },
        {0x8b, , },
        {0xc7, , },
        {0xc6, , },
        {0xc7, , },
        {0xc7, , },
        {0xc7, , },
        {0xc7, , },
        {0xc6, , },
        {0xc7, , },
        {0xc7, , },
        {0x0f6e, , },
        {0x0f7e, , },
        {0x0f6e, , },
        {0x0f7e, , },

        // MOVSB
        {0xa4, , },

        // MOVSD
        {0xa5, , },

        // MOVSQ
        {0xa5, , },

        // MOVSW
        {0xa5, , },

        // MOVSX
        {0x0fbe, , },
        {0x0fbe, , },
        {0x0fbe, , },
        {0x0fbf, , },
        {0x0fbe, , },
        {0x0fbf, , },

        // MOVSXD
        {0x63, , },

        // MOVSX
        {0x63, , },

        // MOVZX
        {0x0fb6, , },
        {0x0fb6, , },
        {0x0fb6, , },
        {0x0fb7, , },
        {0x0fb6, , },
        {0x0fb7, , },

        // MUL
        {0xf6, , },
        {0xf7, , },
        {0xf7, , },
        {0xf7, , },

        // NEG
        {0xf6, , },
        {0xf7, , },
        {0xf7, , },
        {0xf7, , },

        // NOP
        {0x90, , },
        {0x0f1f, , },

        // NOT
        {0xf6, , },
        {0xf7, , },
        {0xf7, , },
        {0xf7, , },

        // OR
        {0x08, , },
        {0x08, , },
        {0x09, , },
        {0x09, , },
        {0x09, , },
        {0x09, , },
        {0x09, , },
        {0x09, , },
        {0x0a, , },
        {0x0a, , },
        {0x0b, , },
        {0x0b, , },
        {0x0b, , },
        {0x0b, , },
        {0x0b, , },
        {0x0b, , },
        {0x83, , },
        {0x83, , },
        {0x83, , },
        {0x0c, , },
        {0x83, , },
        {0x0d, , },
        {0x83, , },
        {0x0d, , },
        {0x83, , },
        {0x0d, , },
        {0x80, , },
        {0x83, , },
        {0x81, , },
        {0x83, , },
        {0x81, , },
        {0x83, , },
        {0x81, , },
        {0x80, , },
        {0x83, , },
        {0x81, , },
        {0x83, , },
        {0x81, , },
        {0x82, , },

        // OUT
        {0xe6, , },
        {0xe7, , },
        {0xe7, , },
        {0xee, , },
        {0xef, , },
        {0xef, , },

        // OUTSB
        {0x6e, , },

        // OUTSD
        {0x6f, , },

        // OUTSW
        {0x6f, , },

        // PAUSE
        {0x90, , },

        // POP
        {0x8f, , },
        {0x8f, , },
        {0x8f, , },
        {0x07, , },
        {0x0f, , },
        {0x17, , },
        {0x1f, , },
        {0x0fa1, , },
        {0x0fa9, , },

        // POPA
        {0x61, , },

        // POPAD
        {0x61, , },

        // POPAW
        {0x61, , },

        // POPF
        {0x9d, , },

        // POPFD
        {0x9d, , },

        // POPFQ
        {0x9d, , },

        // POPFW
        {0x9d, , },

        // PUSH
        {0xff, , },
        {0xff, , },
        {0xff, , },
        {0x06, , },
        {0x0e, , },
        {0x16, , },
        {0x1e, , },
        {0x0fa0, , },
        {0x0fa8, , },
        {0x6a, , },
        {0x6a, , },
        {0x68, , },
        {0x6a, , },
        {0x68, , },
        {0x6a, , },
        {0x68, , },
        {0x6a, , },
        {0x68, , },
        {0x6a, , },
        {0x68, , },

        // PUSHA
        {0x60, , },

        // PUSHAD
        {0x60, , },

        // PUSHAW
        {0x60, , },

        // PUSHF
        {0x9c, , },

        // PUSHFD
        {0x9c, , },

        // PUSHFQ
        {0x9c, , },

        // PUSHFW
        {0x9c, , },

        // RCL
        {0xd0, , },
        {0xd2, , },
        {0xc0, , },
        {0xd1, , },
        {0xd3, , },
        {0xc1, , },
        {0xd1, , },
        {0xd3, , },
        {0xc1, , },
        {0xd1, , },
        {0xd3, , },
        {0xc1, , },

        // RCR
        {0xd0, , },
        {0xd2, , },
        {0xc0, , },
        {0xd1, , },
        {0xd3, , },
        {0xc1, , },
        {0xd1, , },
        {0xd3, , },
        {0xc1, , },
        {0xd1, , },
        {0xd3, , },
        {0xc1, , },

        // RET
        {0xc3, , },
        {0xc2, , },

        // RETF
        {0xcb, , },
        {0xca, , },

        // RETN
        {0xc3, , },
        {0xc2, , },

        // RETW
        {0xc3, , },
        {0xc2, , },

        // RETFW
        {0xcb, , },
        {0xca, , },

        // RETNW
        {0xc3, , },
        {0xc2, , },

        // RETD
        {0xc3, , },
        {0xc2, , },

        // RETFD
        {0xcb, , },
        {0xca, , },

        // RETND
        {0xc3, , },
        {0xc2, , },

        // RETQ
        {0xc3, , },
        {0xc2, , },

        // RETFQ
        {0xcb, , },
        {0xca, , },

        // RETNQ
        {0xc3, , },
        {0xc2, , },

        // ROL
        {0xd0, , },
        {0xd2, , },
        {0xc0, , },
        {0xd1, , },
        {0xd3, , },
        {0xc1, , },
        {0xd1, , },
        {0xd3, , },
        {0xc1, , },
        {0xd1, , },
        {0xd3, , },
        {0xc1, , },

        // ROR
        {0xd0, , },
        {0xd2, , },
        {0xc0, , },
        {0xd1, , },
        {0xd3, , },
        {0xc1, , },
        {0xd1, , },
        {0xd3, , },
        {0xc1, , },
        {0xd1, , },
        {0xd3, , },
        {0xc1, , },

        // RSDC
        {0x0f79, , },

        // RSLDT
        {0x0f7b, , },

        // RSTS
        {0x0f7d, , },

        // SAHF
        {0x9e, , },

        // SAL
        {0xd0, , },
        {0xd2, , },
        {0xc0, , },
        {0xd1, , },
        {0xd3, , },
        {0xc1, , },
        {0xd1, , },
        {0xd3, , },
        {0xc1, , },
        {0xd1, , },
        {0xd3, , },
        {0xc1, , },

        // SALC
        {0xd6, , },

        // SAR
        {0xd0, , },
        {0xd2, , },
        {0xc0, , },
        {0xd1, , },
        {0xd3, , },
        {0xc1, , },
        {0xd1, , },
        {0xd3, , },
        {0xc1, , },
        {0xd1, , },
        {0xd3, , },
        {0xc1, , },

        // SBB
        {0x18, , },
        {0x18, , },
        {0x19, , },
        {0x19, , },
        {0x19, , },
        {0x19, , },
        {0x19, , },
        {0x19, , },
        {0x1a, , },
        {0x1a, , },
        {0x1b, , },
        {0x1b, , },
        {0x1b, , },
        {0x1b, , },
        {0x1b, , },
        {0x1b, , },
        {0x83, , },
        {0x83, , },
        {0x83, , },
        {0x1c, , },
        {0x83, , },
        {0x1d, , },
        {0x83, , },
        {0x1d, , },
        {0x83, , },
        {0x1d, , },
        {0x80, , },
        {0x83, , },
        {0x81, , },
        {0x83, , },
        {0x81, , },
        {0x83, , },
        {0x81, , },
        {0x80, , },
        {0x83, , },
        {0x81, , },
        {0x83, , },
        {0x81, , },
        {0x82, , },

        // SCASB
        {0xae, , },

        // SCASD
        {0xaf, , },

        // SCASQ
        {0xaf, , },

        // SCASW
        {0xaf, , },

        // SFENCE
        {0x0faef8, , },

        // SGDT
        {0x0f01, , },

        // SHL
        {0xd0, , },
        {0xd2, , },
        {0xc0, , },
        {0xd1, , },
        {0xd3, , },
        {0xc1, , },
        {0xd1, , },
        {0xd3, , },
        {0xc1, , },
        {0xd1, , },
        {0xd3, , },
        {0xc1, , },

        // SHLD
        {0x0fa4, , },
        {0x0fa4, , },
        {0x0fa4, , },
        {0x0fa4, , },
        {0x0fa4, , },
        {0x0fa4, , },
        {0x0fa5, , },
        {0x0fa5, , },
        {0x0fa5, , },
        {0x0fa5, , },
        {0x0fa5, , },
        {0x0fa5, , },

        // SHR
        {0xd0, , },
        {0xd2, , },
        {0xc0, , },
        {0xd1, , },
        {0xd3, , },
        {0xc1, , },
        {0xd1, , },
        {0xd3, , },
        {0xc1, , },
        {0xd1, , },
        {0xd3, , },
        {0xc1, , },

        // SHRD
        {0x0fac, , },
        {0x0fac, , },
        {0x0fac, , },
        {0x0fac, , },
        {0x0fac, , },
        {0x0fac, , },
        {0x0fad, , },
        {0x0fad, , },
        {0x0fad, , },
        {0x0fad, , },
        {0x0fad, , },
        {0x0fad, , },

        // SIDT
        {0x0f01, , },

        // SLDT
        {0x0f00, , },
        {0x0f00, , },
        {0x0f00, , },
        {0x0f00, , },
        {0x0f00, , },
        {0x0f00, , },

        // SKINIT
        {0x0f01de, , },

        // SMI
        {0xf1, , },
        // Older Cyrix chips had this; they had to move due to conflict with MMX

        // SMINTOLD
        {0x0f7e, , },

        // SMSW
        {0x0f01, , },
        {0x0f01, , },
        {0x0f01, , },
        {0x0f01, , },
        {0x0f01, , },

        // STC
        {0xf9, , },

        // STD
        {0xfd, , },

        // STI
        {0xfb, , },

        // STOSB
        {0xaa, , },

        // STOSD
        {0xab, , },

        // STOSQ
        {0xab, , },

        // STOSW
        {0xab, , },

        // STR
        {0x0f00, , },
        {0x0f00, , },
        {0x0f00, , },
        {0x0f00, , },
        {0x0f00, , },

        // SUB
        {0x28, , },
        {0x28, , },
        {0x29, , },
        {0x29, , },
        {0x29, , },
        {0x29, , },
        {0x29, , },
        {0x29, , },
        {0x2a, , },
        {0x2a, , },
        {0x2b, , },
        {0x2b, , },
        {0x2b, , },
        {0x2b, , },
        {0x2b, , },
        {0x2b, , },
        {0x83, , },
        {0x83, , },
        {0x83, , },
        {0x2c, , },
        {0x83, , },
        {0x2d, , },
        {0x83, , },
        {0x2d, , },
        {0x83, , },
        {0x2d, , },
        {0x80, , },
        {0x83, , },
        {0x81, , },
        {0x83, , },
        {0x81, , },
        {0x83, , },
        {0x81, , },
        {0x80, , },
        {0x83, , },
        {0x81, , },
        {0x83, , },
        {0x81, , },
        {0x82, , },

        // SVDC
        {0x0f78, , },

        // SVLDT
        {0x0f7a, , },

        // SVTS
        {0x0f7c, , },

        // SWAPGS
        {0x0f01f8, , },

        // TEST
        {0x84, , },
        {0x84, , },
        {0x85, , },
        {0x85, , },
        {0x85, , },
        {0x85, , },
        {0x85, , },
        {0x85, , },
        {0x84, , },
        {0x85, , },
        {0x85, , },
        {0x85, , },
        {0xa8, , },
        {0xa9, , },
        {0xa9, , },
        {0xa9, , },
        {0xf6, , },
        {0xf7, , },
        {0xf7, , },
        {0xf7, , },
        {0xf6, , },
        {0xf7, , },
        {0xf7, , },

        // UD0
        {0x0fff, , },
        {0x0fff, , },
        {0x0fff, , },
        {0x0fff, , },

        // UD1
        {0x0fb9, , },
        {0x0fb9, , },
        {0x0fb9, , },
        {0x0fb9, , },

        // UD2B
        {0x0fb9, , },
        {0x0fb9, , },
        {0x0fb9, , },
        {0x0fb9, , },

        // UD2
        {0x0f0b, , },

        // UD2A
        {0x0f0b, , },

        // UMOV
        {0x0f10, , },
        {0x0f10, , },
        {0x0f11, , },
        {0x0f11, , },
        {0x0f11, , },
        {0x0f11, , },
        {0x0f12, , },
        {0x0f12, , },
        {0x0f13, , },
        {0x0f13, , },
        {0x0f13, , },
        {0x0f13, , },

        // VERR
        {0x0f00, , },
        {0x0f00, , },
        {0x0f00, , },

        // VERW
        {0x0f00, , },
        {0x0f00, , },
        {0x0f00, , },
        // fix missing opcode from source https://www.felixcloutier.com/x86/wait:fwait

        // FWAIT
        {0x9b, , },

        // WBINVD
        {0x0f09, , },

        // XADD
        {0x0fc0, , },
        {0x0fc0, , },
        {0x0fc1, , },
        {0x0fc1, , },
        {0x0fc1, , },
        {0x0fc1, , },
        {0x0fc1, , },
        {0x0fc1, , },

        // XBTS
        {0x0fa6, , },
        {0x0fa6, , },
        {0x0fa6, , },
        {0x0fa6, , },
        // This must be NOLONG since opcode 90 is NOP, and in 64-bit mode
        // "xchg eax,eax" is *not* a NOP.

        // XCHG
        {0x90, , },
        {0x86, , },
        {0x86, , },
        {0x87, , },
        {0x87, , },
        {0x87, , },
        {0x87, , },
        {0x87, , },
        {0x87, , },
        {0x86, , },
        {0x86, , },
        {0x87, , },
        {0x87, , },
        {0x87, , },
        {0x87, , },
        {0x87, , },
        {0x87, , },

        // XLATB
        {0xd7, , },

        // XLAT
        {0xd7, , },

        // XOR
        {0x30, , },
        {0x30, , },
        {0x31, , },
        {0x31, , },
        {0x31, , },
        {0x31, , },
        {0x31, , },
        {0x31, , },
        {0x32, , },
        {0x32, , },
        {0x33, , },
        {0x33, , },
        {0x33, , },
        {0x33, , },
        {0x33, , },
        {0x33, , },
        {0x83, , },
        {0x83, , },
        {0x83, , },
        {0x34, , },
        {0x83, , },
        {0x35, , },
        {0x83, , },
        {0x35, , },
        {0x83, , },
        {0x35, , },
        {0x80, , },
        {0x83, , },
        {0x81, , },
        {0x83, , },
        {0x81, , },
        {0x83, , },
        {0x81, , },
        {0x80, , },
        {0x83, , },
        {0x81, , },
        {0x83, , },
        {0x81, , },
        {0x82, , },
        // CMPPS/CMPSS must come after the specific ops; that way the disassembler will find the
        // specific ops first and only disassemble illegal ones as cmpps/cmpss.
        {0xf30f2a, , },
        {0xf30f2d, , },
        {0xf30f2d, , },
        {0xf30f2c, , },
        {0x0f50, , },

        // FXRSTOR64
        {0x0fae, , },

        // FXSAVE64
        {0x0fae, , },
        // Introduced in late Penryn ... we really need to clean up the handling
        // of CPU feature bits.
        // These instructions are not SSE-specific; they are
        // and work even if CR4.OSFXFR == 0
        // PINSRW is documented as using a reg32, but it's really using only 16 bit
        // -- accept either, but be truthful in disassembly
        // CLFLUSH needs its own feature flag implemented one day
        {0x0fc3, , },
        {0x66, , },
        {0x66, , },
        {0x660fc5, , },
        {0x660fc4, , },
        // CMPPD/CMPSD must come after the specific ops; that way the disassembler will find the
        // specific ops first and only disassemble illegal ones as cmppd/cmpsd.
        {0xf20f2d, , },
        {0xf20f2d, , },
        {0xf20f2a, , },
        {0xf20f2c, , },
        {0xf20f2c, , },
        {0x66, , },
        {0x0f78, , },
        {0x0f79, , },
        {0x0fbd, , },
        {0x660f3a17, , },
        {0x660f3a14, , },

        // PEXTRQ
        {0x660f3a16, , },
        {0x660f3a15, , },

        // PINSRQ
        {0x660f3a22, , },
        {0x660f3a22, , },
        {0x0f38f0, , },
        {0x0f38f1, , },
        {0x0fb8, , },
        // Is NEHALEM right here?
        // Intel VAES instructions
        // Intel VAES + AVX512VL instructions
        // Intel VAES + AVX512F instructions
        // Specific aliases first, then the generic version, to keep the disassembler happy...
        // Specific aliases first, then the generic version, to keep the disassembler happy...
        // Specific aliases first, then the generic version, to keep the disassembler happy...
        // Specific aliases first, then the generic version, to keep the disassembler happy...
        // These are officially documented as VMOVDQA, but VMOVQQA seems more logical to me...
        // These are officially documented as VMOVDQU, but VMOVQQU seems more logical to me...
        // Officially VMOVNTDQ, but VMOVNTQQ seems more logical to me...
        // Intel VPCLMULQDQ instructions
        // Intel VPCLMULQDQ + AVX512VL instructions
        // Intel VPCLMULQDQ + AVX512F instructions
        //
        // Per AVX spec revision 7, document 319433-007
        // Per AVX spec revision 13, document 319433-013
        // Per AVX spec revision 14, document 319433-014
        //
        // based on pub number 43724 revision 3.04 date August 2009
        //
        // updated to match draft from AMD developer (patch has been
        // sent to binutils
        // 2010-03-22 Quentin Neill <quentin.neill@amd.com>
        //        Sebastian Pop  <sebastian.pop@amd.com>
        //
        //
        // based on pub number 43479 revision 3.04 dated November 2009
        //
        //
        // fixed: spec mention imm[7:4] though it should be /is4 even in spec
        //
        // fixed: spec mention only 3 operands in mnemonics
        //
        // fixed: spec point wrong VPCOMB in mnemonic
        //
        // fixed: spec has ymmreg for l0
        //
        // fixed: spec has VPHADDUBWD
        //
        // fixed: opcode db
        //
        // fixed: spec has ymmreg for l0
        //
        // fixed: spec has d7 opcode
        //
        // fixed: spec has 97,9f opcodes here
        //
        // fixed: spec point xmmreg instead of reg/mem
        //
        // fixed: spec error /r is needed
        //
        // fixed: spec error /r is needed
        //
        // fixed: spec has ymmreg for l0
        //
        // based on pub number 319433-011 dated July 2011
        //
        //
        // based on pub number 319433-011 dated July 2011
        //
        // MJC PUBLIC END

        // RDPKRU
        {0x0f01ee, , },

        // WRPKRU
        {0x0f01ef, , },
        {0xf30fc7, , },
        {0xf30fc7, , },
        // This one was killed before it saw the light of day
        // AMD Zen v1
        {0x0f01fc, , },
        {0x0fae, , },
        {0x0f38f9, , },
        {0x660f38f8, , },
        {0xf30fae, , },

        // INCSSPQ
        {0xf30fae, , },

        // RDSSPQ
        {0xf30f1e, , },

        // WRUSSQ
        {0x660f38f5, , },

        // WRSSQ
        {0x0f38f6, , },
        // These should be last in the file
        {0x0f18, , },
        {0x0f18, , },
        {0x0f18, , },
        {0x0f18, , },
        {0x0f18, , },
        {0x0f18, , },
        {0x0f18, , },
        {0x0f18, , },
        {0x0f19, , },
        {0x0f19, , },
        {0x0f19, , },
        {0x0f19, , },
        {0x0f19, , },
        {0x0f19, , },
        {0x0f19, , },
        {0x0f19, , },
        {0x0f1a, , },
        {0x0f1a, , },
        {0x0f1a, , },
        {0x0f1a, , },
        {0x0f1a, , },
        {0x0f1a, , },
        {0x0f1a, , },
        {0x0f1a, , },
        {0x0f1b, , },
        {0x0f1b, , },
        {0x0f1b, , },
        {0x0f1b, , },
        {0x0f1b, , },
        {0x0f1b, , },
        {0x0f1b, , },
        {0x0f1b, , },
        {0x0f1c, , },
        {0x0f1c, , },
        {0x0f1c, , },
        {0x0f1c, , },
        {0x0f1c, , },
        {0x0f1c, , },
        {0x0f1c, , },
        {0x0f1c, , },
        {0x0f1d, , },
        {0x0f1d, , },
        {0x0f1d, , },
        {0x0f1d, , },
        {0x0f1d, , },
        {0x0f1d, , },
        {0x0f1d, , },
        {0x0f1d, , },
        {0x0f1e, , },
        {0x0f1e, , },
        {0x0f1e, , },
        {0x0f1e, , },
        {0x0f1e, , },
        {0x0f1e, , },
        {0x0f1e, , },
        {0x0f1e, , },
        {0x0f1f, , },
        {0x0f1f, , },
        {0x0f1f, , },
        {0x0f1f, , },
        {0x0f1f, , },
        {0x0f1f, , },
        {0x0f1f, , },
        {0x0f1f, , },
    };


    Register_Desc	g_register_desc_table[(size_t)Register::COUNT] = {
        {Operand::Size::NONE, 0},	// UNKNOWN,

    };


}
