Fix: foo : *[]DWORD;
Fix: message:        string  = "Hello World";


// @TODO Implement it
parse_array
parse_scope

Pass current_token as parameter to all parse_*** functions? To avoid some stream::get (this is also easy to forget)...


Add corresponding token to AST_Node_***???? With pointer or index (ui16, ui32), with a way to find from which sub token array the sub AST tree is linked to?







- to_string(uint64) est-ce que ce doit être une version template pour gérer à la fois le 32 et 64 bits?

- Hash_Table et Keyword_Hash_Table: à passer en struct avec fonctions libres


fstd/system/path:
 - Remove STL dependency
 - Do the path always be absolut internally? Or at least when the path exceed 260 characters under Windows
   - Maybe the conversion to absolute and the prefix path should be only be done when opening the file as this is specific to Windows and path should be 100% portable (in this case the path should be stored as utf8 string)


Bits operations:
 - Check over and underflow when shifting bits has behavior is platforme specific by default, ARM and X86 CPU doesn't react in the same way (this is a undefined behavior in C/C++). But adding a runtime check will not impact
   a lot performances, this is a interesting trade-off compared to having a UB (which is super error-prone). This check must be done for both passes, at compile-time and in the byte-code. This check certainly consist on a simple operation like a cast or a modulo. Having an option to disable it can also be interesting if for some people it is a performance issue (should be a local option. eg. "ui16_value #no_check << n_bits").


FSTD:
 - Is it better to use the Win32 equivalent of std::contional in a thread_pool implementation than a while(true) with a mutex (to lock the task container)
   and a yield (check if a CPU core stay at 100% while there is no task to run) ?
 - Logger and report_error() should be able to share the same lock on the stdout (need we put it in globals or in stdio module?)

Lexer:
 - Optimize the Token structure size (removing aliasing,...)
 - Test lexer performances
 - Numeric literals:
   - Add hexadecimal floating point support (voir stb__clex_parse_float: https://github.com/nothings/stb/blob/master/stb_c_lexer.h)
   - Need support suffix for binary and hexadecimal numbers?
   - Binary and hexadecimal numbers should be unsigned by default?
 - Analyse if with tokens_length_heuristic at 6 there is some allocations, find a strategy for the allocation if needed
 - Do we need to use crc32 for the keys of the keywords hash table?

Parser:
 - Handle operator precedence
 - Handle '-' character, unary or binary operator

Langage:
 - Support of imaginary numbers?
	- http://villemin.gerard.free.fr/Wwwgvmm/Type/aaaCompl/Terminal.htm
	- Add a suffix for numeric_literals
	- Add functions in the std library

- Support Quine (compile time test):
    - https://en.wikipedia.org/wiki/Quine_(computing)
 
Grammar:
https://dlang.org/spec/grammar.html
https://dlang.org/spec/lex.html
https://www.youtube.com/watch?v=9-EYWLbmiG0

Expression types
https://drive.google.com/file/d/1OggMRIwsuxse2MtkM6XIbL3pNMDUIzVC/view

################################################################################
In f-lang:
 - check how to have template specialization to be able to optimize functions like to_string depending on the base value
   can we generate at compile time best code by detecting that the base is a constant and run automatically conditions at compile time.
   
Intermediate Representation IR code:
 - Look at GCC Gimple (IR of gcc)
 - LLVM: https://llvm.org/devmtg/2017-06/1-Davis-Chisnall-LLVM-2017.pdf  
 - SSA (lowest level of the 3 that Gimple contains)

Optimization of generated code:
If you can’t resist poking your foot into that hole, some keywords to get you started are “constant propagation”, “common subexpression elimination”, “loop invariant code motion”, “global value numbering”, “strength reduction”, “scalar replacement of aggregates”, “dead code elimination”, and “loop unrolling”.
How to optimize our if/swicth statement?




#procedure_of_call retourne à la compilation un pointeur sur fonction d'un appel de fonction avec ses paramètres. Utile lorsqu'il y a de la surcharge sur la fonction.
Les fonctions sont identiques si elles ont les mêmes types paramètres et valeur de retour (même si leur nom et adresse sont différentes)



For when booststrapped
Error messages au format:
Error: MY ERROR MESSAGE
    LINE NUMBER | line of the code

Put in read the token in error, for multilines errors print the starting line and the last one. For string literals by exemple. Put in red all the range.
The report error should take the message and the range a string view of what to put in red and string views of 2 lines.
Find a way to generate error codes.







#####################################
NASM pdb?
try -gcv8 instead of -g

ex: nasm -f win32 -gcv8 sandbox.asm -l sandbox.lst
    ld -mi386pe -o sandbox.exe sandbox.obj

https://www.nasm.us/doc/nasmdoc2.html#section-2.1.12
https://sonictk.github.io/asm_tutorial/#hello,worldrevisted/writingabuildscript