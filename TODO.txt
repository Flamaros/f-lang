Ajouter au TODO:
Attention au allocations dans la hash_table pour les tables de symboles

Il faut peut être compter les fonctions,... Lors du parsing afin de pouvoir preallouer les structures pour l'IR


------
Il faut éclaircir le besoin d'avoir 2 fonctions pour l'alignement (compute_aligned_size et align_address)




#########################
Checkers PE file format:

Semble être ce qu'il me faut:
https://github.com/VinnySmallUtilities/PE-file-checker

A tester:
https://petoolse.github.io/petools/
https://blog.malwarebytes.com/threat-analysis/2014/05/five-pe-analysis-tools-worth-looking-at/
https://securityonline.info/pe-cli-tool-to-analyze-pe-files/
https://pkg.go.dev/debug/pe
http://www.pe-explorer.com/peexplorer-tour-more-tools.htm
https://www.softwareverify.com/cpp-pe-file-browser.php
https://www.youtube.com/watch?v=tF_vu8P45wY


Comprendre le stub ms-dos:
https://osandamalith.com/2020/07/19/exploring-the-ms-dos-stub/
https://stackoverflow.com/questions/9655272/remove-dos-stub-from-a-pe-file


Chargement des dll:
  table des répertoire:
    https://docs.microsoft.com/fr-fr/windows/win32/debug/pe-format



Assembleur:
https://www.intel.com/content/dam/develop/external/us/en/documents/introduction-to-x64-assembly-181178.pdf




#########################

Ajouter des marker Tracy pour la consommation de RAM

Et celle de la stack avec les appels récursif


#########################




Il va falloir réfléchir à faire une passe d'analyse qui vérifie les expressions et remplisse l'IR afin que les différents backend n'aient pas à refaire ce job de checker les erreurs de grammaire,...

Vérifications à faire:
  - Vérification de la déclaration des types (types des membres des structs bien définie)
  - Vérification de la validité d'une expression
     - scope des variables
	 - correspondance des types pour les opérations ('+', '-', '.',...)
  - type des variables passées aux fonctions soit le bon (après évaluation du type final d'une expression)
  - Références cycliques sur les définitions des types



#########################



Print function modifiers

Mettre en place le remplissage de l'arbre des scopes
  * Faire que les AST_Node qui déclarent une variables, un types, une fonction pointe vers le scope dans lequel la déclaration est effectuée.
  * Voir comment gérer le using : copier les définitions d'un scope dans un autre ou faire un lien? Comment gérer les ambiguïtés dans ce cas?



Faire une permière passe de résolution des types sur l'AST, ou il faut pouvoir retrouver les types basics depuis les définitions des alias et structs.
Il faut utiliser une table de hash pour ça en insérant les alias dans une table de hash "globale" (struct IR) ou la clé est l'alias et la valeur le type de base (il faudra parfois recurser pour retrouver le bon type)



Implementer une hash-table
 - La faire en TDD
 - Comparer les perfs avec la STL
 - Voir pour récupèrer des stats comme la mémoire allouée





Faire une passe Intermediate Representation pour avoir récuperer des informations sur les types.
Il faut faire le lien des users types vers les types basic (les alias notamment).
Ainsi le backend à juste à générer le code d'initialisation par rapport au type de basic.

#########################
Ajouter un crash handler avec print de la stack.
Ca sera utile pour debugguer le compilateur quand il sera lancé un release. Et utilisé pour developper des véritables applications comme l'éditeur texte ou le debuggueur.


#########################
Tester les definitions circulaires de types, avec un alias, une struct (un membre dépend de la struct elle même,...)

#########################

Pour le language de représentation intermédiaire (IR):
Il faut sans doute respecter la règle de l'assignation unique (qui aide pour pas mal d'optimisations lors de la génération ASM)
https://en.wikipedia.org/wiki/Static_single_assignment_form


#########################


Optimisation sur les traitements de pointeurs et problèmes d'aliasing:
  - https://fr.wikipedia.org/wiki/Restrict

#########################

Voir s'il ne faut pas supprimer le type bool, ou faire que ce soit toujours 1 byte. Voir problème du std::vector<bool> qui ne fourni pas la méthode data à cause des pb qu'il pourrait y avoir avec des memcpy,...


#########################

Ajouter la possibilité d'avoir des types primitif fort (cast requit):
  typedef int ID;

  ID id = 2;
  int toto = (int)id;

Mais du coup il faut pouvoir faire un truc du genre:
#if Typeof(id).is_primitive
   ....
Afin de pouvoir avoir les fonctions print qui déduisent le type primitif afin de pouvoir afficher la valeur.



#########################





Do the Stack container (based on Array?)




Expressions:
  - Handling (whith precedence and priority):
    - Unary operators
	- Function call
	- Assignment
  - Check errors
  - Ambiguities?

Generate expressions
Generate array expressions



#########################
Check errors:
interdire les assignations dans les if (truc = 2)

if ((truc =2)) doit être bloqué aussi je pense
-------------------------
#########################




#########################
Docs:
Description :http://cbloomrants.blogspot.com/2020/07/robust-win32-io.html?m=1
Bonne source d'information pour éviter les bugs avec les API win32
-------------------------
#########################




// @TODO support print of floats







Add a pre-main that get arguments and call ExitProcess or do:
return exit(main());
Really need to call ExitProcess as some OS features can create threads in background and ExitProcess will ensure that those threads are closed too.



Implement everything that is necessary to be able to put win32 declarations directly in f-lang:
 - https://github.com/microsoft/win32metadata
 - Add an interpreter that simplify the tree:
   - Generate unique function references (extract nested function to put them in the global scope, be able to store adresses,...). The interface of the interpreter should be able to help the cpp-backend to sort functions (maybe not necessary with predeclaration).
 - Allow external function declarations
 - Allow imports


Start the implementation of native binary backend.

Add compiler options:
 - command line (debug/release)
 - in the main.f directly for advanced configuration (64bit, debug options)


Start generating ASM with JIT for the compile time code execution, then look on how to generate the executable from scratch.




 
Rewrite alias parsing


It may miss a lot of error checks, in parse_variable, parse_scope,...


// @TODO Implement it
parse_array

Pass current_token as parameter to all parse_*** functions? To avoid some stream::get (this is also easy to forget)...


Add corresponding token to AST_Node_***???? With pointer or index (ui16, ui32), with a way to find from which sub token array the sub AST tree is linked to?







- to_string(uint64) est-ce que ce doit être une version template pour gérer à la fois le 32 et 64 bits?

- Hash_Table et Keyword_Hash_Table: à passer en struct avec fonctions libres


fstd/system/path:
 - Remove STL dependency
 - Do the path always be absolut internally? Or at least when the path exceed 260 characters under Windows
   - Maybe the conversion to absolute and the prefix path should be only be done when opening the file as this is specific to Windows and path should be 100% portable (in this case the path should be stored as utf8 string)


Bits operations:
 - Check over and underflow when shifting bits has behavior is platforme specific by default, ARM and X86 CPU doesn't react in the same way (this is a undefined behavior in C/C++). But adding a runtime check will not impact
   a lot performances, this is a interesting trade-off compared to having a UB (which is super error-prone). This check must be done for both passes, at compile-time and in the byte-code. This check certainly consist on a simple operation like a cast or a modulo. Having an option to disable it can also be interesting if for some people it is a performance issue (should be a local option. eg. "ui16_value #no_check << n_bits").

Code generation optimizations:
 - https://www.google.com/url?q=https://en.m.wikipedia.org/wiki/Static_single_assignment_form&sa=D&source=calendar&usd=2&usg=AOvVaw3hsefIGV-wnVmqJ_FY2nxN
 - https://www.google.com/url?q=https://stackoverflow.com/questions/109710/how-do-the-likely-unlikely-macros-in-the-linux-kernel-work-and-what-is-their-ben&sa=D&source=calendar&usd=2&usg=AOvVaw3GrizJjwkY0SKKrcL3et-K
 - https://kristerw.github.io/2021/10/19/fast-math/

FSTD:
 - Is it better to use the Win32 equivalent of std::contional in a thread_pool implementation than a while(true) with a mutex (to lock the task container)
   and a yield (check if a CPU core stay at 100% while there is no task to run) ?
   Win32 conditionnal variables: https://docs.microsoft.com/en-us/windows/win32/sync/condition-variables
 - Logger and report_error() should be able to share the same lock on the stdout (need we put it in globals or in stdio module?)

Lexer:
 - Optimize the Token structure size (removing aliasing,...)
 - Test lexer performances
 - Numeric literals:
   - Add hexadecimal floating point support (voir stb__clex_parse_float: https://github.com/nothings/stb/blob/master/stb_c_lexer.h) ou https://arxiv.org/abs/2101.11408
   - Need support suffix for binary and hexadecimal numbers?
   - Binary and hexadecimal numbers should be unsigned by default?
 - Analyse if with tokens_length_heuristic at 6 there is some allocations, find a strategy for the allocation if needed
 - Do we need to use crc32 for the keys of the keywords hash table?

Parser:
 - Handle operator precedence
 - Handle '-' character, unary or binary operator
 - Switch: error on case redondancy (should not have multiple case on same value)

Langage:
 - Support of imaginary numbers?
	- http://villemin.gerard.free.fr/Wwwgvmm/Type/aaaCompl/Terminal.htm
	- Add a suffix for numeric_literals
	- Add functions in the std library

- Support Quine (compile time test):
    - https://en.wikipedia.org/wiki/Quine_(computing)
 
Grammar:
https://dlang.org/spec/grammar.html
https://dlang.org/spec/lex.html
https://www.youtube.com/watch?v=9-EYWLbmiG0

Expression types
https://drive.google.com/file/d/1OggMRIwsuxse2MtkM6XIbL3pNMDUIzVC/view

################################################################################
Floats:
Support print of floats
Test "-0" et "-0.0" sign must stay

Take a look at Ryu&Ryu s2f.c for an implementation of string to float!
Or https://github.com/jk-jeon/dragonbox
or https://arxiv.org/abs/2101.11408

Check the number of digit my float parsing can handle with precision, the lexer may have to go to error after a certain number of digits due to the lack of precision.

To print floats:
Dtoa-fast
https://github.com/achan001/dtoa-fast

How should I handle nan and inf numbers? I think that it should be defines that comes with the maths module of the default library.


################################################################################
In f-lang:
 - check how to have template specialization to be able to optimize functions like to_string depending on the base value
   can we generate at compile time best code by detecting that the base is a constant and run automatically conditions at compile time.
   
Intermediate Representation IR code:
 - Look at GCC Gimple (IR of gcc)
 - LLVM: https://llvm.org/devmtg/2017-06/1-Davis-Chisnall-LLVM-2017.pdf  
 - SSA (lowest level of the 3 that Gimple contains)

Optimization of generated code:
If you can’t resist poking your foot into that hole, some keywords to get you started are “constant propagation”, “common subexpression elimination”, “loop invariant code motion”, “global value numbering”, “strength reduction”, “scalar replacement of aggregates”, “dead code elimination”, and “loop unrolling”.
How to optimize our if/swicth statement?




#procedure_of_call retourne à la compilation un pointeur sur fonction d'un appel de fonction avec ses paramètres. Utile lorsqu'il y a de la surcharge sur la fonction.
Les fonctions sont identiques si elles ont les mêmes types paramètres et valeur de retour (même si leur nom et adresse sont différentes)



For when booststrapped
Error messages au format:
Error: MY ERROR MESSAGE
    LINE NUMBER | line of the code

Put in read the token in error, for multilines errors print the starting line and the last one. For string literals by exemple. Put in red all the range.
The report error should take the message and the range a string view of what to put in red and string views of 2 lines.
Find a way to generate error codes.




// Removing the C and C++ Runtimes
https://hero.handmade.network/forums/code-discussion/t/94-guide_-_how_to_avoid_c_c++_runtime_on_windows#530


#####################################
NASM pdb?
try -gcv8 instead of -g

ex: nasm -f win32 -gcv8 sandbox.asm -l sandbox.lst
    ld -mi386pe -o sandbox.exe sandbox.obj

https://www.nasm.us/doc/nasmdoc2.html#section-2.1.12
https://sonictk.github.io/asm_tutorial/#hello,worldrevisted/writingabuildscript


#####################################
JIT:
https://stackoverflow.com/questions/4911993/how-to-generate-and-run-native-code-dynamically 
Libjit

https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-globalalloc
Memory allocated with this function is guaranteed to be aligned on an 8-byte boundary. To execute dynamically generated code, use the VirtualAlloc function to allocate memory and the VirtualProtect function to grant PAGE_EXECUTE access.
https://docs.microsoft.com/en-us/windows/win32/memory/comparing-memory-allocation-methods

#####################################
ASM:
https://software.intel.com/content/www/us/en/develop/download/intel-64-and-ia-32-architectures-sdm-combined-volumes-2a-2b-2c-and-2d-instruction-set-reference-a-z.html
https://revers.engineering/applied-re-accelerated-assembly-p1/
https://revers.engineering/applied-re-basic-architecture/


#####################################
https://github.com/HardCoreCodin/SlimApp

Intéressant pour les allocations et code event win32


#####################################
Dans research\BrainFuck-compiler

Compilateur générant un executable x64 Windows, intéressant pour la génération du binaire au format PE sans dépendence!!!


#####################################
Au moins la première section (shadowing, if without instruction,...) devrait être prise en charge par le compilateur
https://ourmachinery.com/post/a-taxonomy-of-bugs/

La partie memory aussi me semble intéressante pour l'allocateur et le debogueur


#####################################
Détecter l'utilisation de références temporaires (utilisation d'un pointeur sur une variable locale à une fonction (return ou assignation à une variable qui vivra en dehors du scope de la fonction))
https://twitter.com/SebAaltonen/status/1519035409178804231?t=vO2ENkhwQqdq-HgtLQ2aWA&s=19

#####################################
Erreur quand une variable a le même nom qu'un paramètre template. Voir hash table avec bucket_size

Doit être vu comme une redeclaration de variable? Où il faut fournir un moyen de lever l'ambiguïté


#####################################
Inlining:
https://twitter.com/mmalex/status/1532034169068470273?s=21&t=IYIoovQHiI6cECkpp8d1SA

Ne pas inliner les fonctions récursives