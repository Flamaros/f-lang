- Unicode dans unicode.hpp
- file.cpp/path.cpp gérer les flag absolute pour savoir si je peux utiliser le préfixe \\?\
- to_string(uint64) est-ce que ce doit être une version template pour gérer à la fois le 32 et 64 bits?
- Fixer warning

- Mettre en place le mécanisme de log d'erreurs pour l'utilisateur
 - Le programme doit tout de suite arrêter son execution


Add utf16_string and utf16_string_view
 - And conversion functions from/to string
 - fix path API according to
 - Fix stdio::print too
   - Add %ls to print utf16_string

- Hash_Table et Keyword_Hash_Table: à passer en struct avec fonctions libres
- string_literals (utiliser ` (back tick) plutot pour les string raw à la place de ' qui reste valable pour un unique caractère) https://odin-lang.org/docs/overview/#string-and-character-literals
- numeric_literals


fstd/system/path:
 - Remove STL dependency


FSTD:
 - Is it better to use the Win32 equivalent of std::contional in a thread_pool implementation than a while(true) with a mutex (to lock the task container)
   and a yield (check if a CPU core stay at 100% while there is no task to run) ?
 - Logger and report_error() should be able to share the same lock on the stdout (need we put it in globals or in stdio module?)

Logs:
 - We need logs for the end user
 - we need logs for the language developer (me)

Lexer:
 - Optimize the Token structure size (removing aliasing,...)
 - Add string literal support with escape sequences
 - Test lexer performances
 - Add hexadecimal floating point support
 - Analyse if with tokens_length_heuristic at 6 there is some allocations, find a strategy for the allocation if needed
 - Do we need to use crc32 for the keys of the keywords hash table?

Parser:
 - Handle operator precedence
 - Handle '-' character, unary or binary operator

Langage:
 - Support of imaginary numbers?
	- http://villemin.gerard.free.fr/Wwwgvmm/Type/aaaCompl/Terminal.htm
	- Add a suffix for numeric_literals
	- Add functions in the std library

- Support Quine (compile time test):
    - https://en.wikipedia.org/wiki/Quine_(computing)
 
Grammar:
https://dlang.org/spec/grammar.html
https://dlang.org/spec/lex.html
https://www.youtube.com/watch?v=9-EYWLbmiG0

Expression types
https://drive.google.com/file/d/1OggMRIwsuxse2MtkM6XIbL3pNMDUIzVC/view

################################################################################
In f-lang:
 - check how to have template specialization to be able to optimize functions like to_string depending on the base value
   can we generate at compile time best code by detecting that the base is a constant and run automatically conditions at compile time.